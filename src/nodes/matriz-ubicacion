global_x_gyro = rospy.get_param("/global_x_gyro")
global_y_gyro = rospy.get_param("/global_y_gyro")
global_t_gyro = rospy.get_param("/global_t_gyro")
global_acurracy_x_gyro = rospy.get_param("/global_acurracy_x_gyro")
global_acurracy_y_gyro = rospy.get_param("/global_acurracy_y_gyro")
global_x_gps = rospy.get_param("/global_x_gps")
global_y_gps = rospy.get_param("/global_y_gps")
global_t_gps = rospy.get_param("/global_t_gps")
global_acurracy_x_gps = rospy.get_param("/global_acurracy_x_gps")
global_acurracy_y_gps = rospy.get_param("/global_acurracy_y_gps")

# fetch a group (dictionary) of parameters

gyroD = rospy.get_param('gyroD') #gains = rospy.get_param('gains')
gpsD = rospy.get_param('gpsD') #D dictionary

x_gyro, y_gyro, t_gyro, acurracy_x_gyro, acurracy_y_gyro = gains['X_GYRO'], gains['Y_GYRO'], gains['T_GYRO'], gains['ACURRACY_X_GYRO'], gains['ACURRACY_Y_GYRO'] #p, i, d = gains['P'], gains['I'], gains['D']
rospy.set_param_raw('gains', {'x_gyro': 1, 'y_gyro': 2, 't_gyro': 3, 'acurracy_x_gyro': 4, 'acurracy_y_gyro': 5}) #rospy.set_param_raw('gains', {'p': 1, 'i': 2, 'd': 3})
rospy.loginfo("gains are %s, %s, %s, %s, %s", x_gyro, y_gyro, t_gyro, acurracy_x_gyro, acurracy_y_gyro) #rospy.loginfo("gains are %s, %s, %s", p, i, d)

x_gps, y_gps, t_gps, acurracy_x_gps, acurracy_y_gps = gains['X_GPS'], gains['Y_GPS'], gains['T_GPS'], gains['ACURRACY_X_GPS'], gains['ACURRACY_Y_GPS']
rospy.set_param_raw('gains', {'x_gps': 1, 'y_gps': 2, 't_gps': 3, 'acurracy_x_gps': 4, 'acurracy_y_gps': 5})
rospy.loginfo("gains are %s, %s, %s, %s, %s", x_gps, y_gps, t_gps, acurracy_x_gps, acurracy_y_gps)


rospy.get_param('gains/P')
if rospy.has_param('to_delete'):
    rospy.delete_param('to_delete')
try:
    rospy.delete_param('to_delete')
except KeyError:
    print "value not set"
/////////////////////////////////////////////////



def listener():
    rospy.init_node('listener') #inicializo el nodo
    #chatter es el topic; el nodo detectionMine esta sub a Spedro y a map_location
    rospy.Subscriber("detection_sensor_pedro", Bool, callback) #corregir
    if 
    rospy.spin()